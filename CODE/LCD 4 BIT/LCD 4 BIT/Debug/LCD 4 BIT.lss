
LCD 4 BIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000035e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  000003f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000067b  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000209  00000000  00000000  00000b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d5  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000021f  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c2  00000000  00000000  00001437  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001af9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  8a:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
}

void LCD_Clear()
{
	LCD_Command (0x01);					/* clear display */
	LCD_Command (0x80);					/* cursor at home position */
  92:	ae 98       	cbi	0x15, 6	; 21
  94:	af 9a       	sbi	0x15, 7	; 21
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	92 2b       	or	r25, r18
  a0:	9b bb       	out	0x1b, r25	; 27
  a2:	e9 ef       	ldi	r30, 0xF9	; 249
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_Command+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_Command+0x1a>
  ac:	00 00       	nop
  ae:	af 98       	cbi	0x15, 7	; 21
  b0:	e9 ef       	ldi	r30, 0xF9	; 249
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_Command+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_Command+0x28>
  ba:	00 00       	nop
  bc:	af 9a       	sbi	0x15, 7	; 21
  be:	2b b3       	in	r18, 0x1b	; 27
  c0:	2f 70       	andi	r18, 0x0F	; 15
  c2:	f0 e1       	ldi	r31, 0x10	; 16
  c4:	8f 9f       	mul	r24, r31
  c6:	c0 01       	movw	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	82 2b       	or	r24, r18
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_Command+0x40>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_Command+0x46>
  d8:	00 00       	nop
  da:	af 98       	cbi	0x15, 7	; 21
  dc:	e9 ef       	ldi	r30, 0xF9	; 249
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_Command+0x4e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_Command+0x54>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <LCD_Char>:
  ea:	ae 9a       	sbi	0x15, 6	; 21
  ec:	af 9a       	sbi	0x15, 7	; 21
  ee:	9b b3       	in	r25, 0x1b	; 27
  f0:	9f 70       	andi	r25, 0x0F	; 15
  f2:	28 2f       	mov	r18, r24
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	92 2b       	or	r25, r18
  f8:	9b bb       	out	0x1b, r25	; 27
  fa:	e9 ef       	ldi	r30, 0xF9	; 249
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_Char+0x14>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_Char+0x1a>
 104:	00 00       	nop
 106:	af 98       	cbi	0x15, 7	; 21
 108:	e9 ef       	ldi	r30, 0xF9	; 249
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Char+0x22>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_Char+0x28>
 112:	00 00       	nop
 114:	af 9a       	sbi	0x15, 7	; 21
 116:	2b b3       	in	r18, 0x1b	; 27
 118:	2f 70       	andi	r18, 0x0F	; 15
 11a:	f0 e1       	ldi	r31, 0x10	; 16
 11c:	8f 9f       	mul	r24, r31
 11e:	c0 01       	movw	r24, r0
 120:	11 24       	eor	r1, r1
 122:	82 2b       	or	r24, r18
 124:	8b bb       	out	0x1b, r24	; 27
 126:	89 ef       	ldi	r24, 0xF9	; 249
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Char+0x40>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Char+0x46>
 130:	00 00       	nop
 132:	af 98       	cbi	0x15, 7	; 21
 134:	e9 ef       	ldi	r30, 0xF9	; 249
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Char+0x4e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_Char+0x54>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <LCD_String>:
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
 148:	88 81       	ld	r24, Y
 14a:	88 23       	and	r24, r24
 14c:	31 f0       	breq	.+12     	; 0x15a <LCD_String+0x18>
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	0e 94 75 00 	call	0xea	; 0xea <LCD_Char>
 154:	89 91       	ld	r24, Y+
 156:	81 11       	cpse	r24, r1
 158:	fb cf       	rjmp	.-10     	; 0x150 <LCD_String+0xe>
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <LCD_number>:
 160:	4f 92       	push	r4
 162:	5f 92       	push	r5
 164:	6f 92       	push	r6
 166:	7f 92       	push	r7
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	2c 97       	sbiw	r28, 0x0c	; 12
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	6b 01       	movw	r12, r22
 190:	7c 01       	movw	r14, r24
 192:	61 15       	cp	r22, r1
 194:	71 05       	cpc	r23, r1
 196:	81 05       	cpc	r24, r1
 198:	91 05       	cpc	r25, r1
 19a:	29 f4       	brne	.+10     	; 0x1a6 <LCD_number+0x46>
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	89 83       	std	Y+1, r24	; 0x01
 1a0:	1a 82       	std	Y+2, r1	; 0x02
 1a2:	91 2c       	mov	r9, r1
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <LCD_number+0xdc>
 1a6:	9b 01       	movw	r18, r22
 1a8:	ac 01       	movw	r20, r24
 1aa:	b1 2c       	mov	r11, r1
 1ac:	0f 2e       	mov	r0, r31
 1ae:	fa e0       	ldi	r31, 0x0A	; 10
 1b0:	4f 2e       	mov	r4, r31
 1b2:	51 2c       	mov	r5, r1
 1b4:	61 2c       	mov	r6, r1
 1b6:	71 2c       	mov	r7, r1
 1b8:	f0 2d       	mov	r31, r0
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <LCD_number+0x5e>
 1bc:	b9 2c       	mov	r11, r9
 1be:	99 24       	eor	r9, r9
 1c0:	93 94       	inc	r9
 1c2:	9b 0c       	add	r9, r11
 1c4:	ca 01       	movw	r24, r20
 1c6:	b9 01       	movw	r22, r18
 1c8:	a3 01       	movw	r20, r6
 1ca:	92 01       	movw	r18, r4
 1cc:	0e 94 8b 01 	call	0x316	; 0x316 <__udivmodsi4>
 1d0:	21 15       	cp	r18, r1
 1d2:	31 05       	cpc	r19, r1
 1d4:	41 05       	cpc	r20, r1
 1d6:	51 05       	cpc	r21, r1
 1d8:	89 f7       	brne	.-30     	; 0x1bc <LCD_number+0x5c>
 1da:	99 20       	and	r9, r9
 1dc:	41 f1       	breq	.+80     	; 0x22e <LCD_number+0xce>
 1de:	09 2d       	mov	r16, r9
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	c8 01       	movw	r24, r16
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	2c 0f       	add	r18, r28
 1ec:	3d 1f       	adc	r19, r29
 1ee:	02 0f       	add	r16, r18
 1f0:	13 1f       	adc	r17, r19
 1f2:	fc 01       	movw	r30, r24
 1f4:	eb 19       	sub	r30, r11
 1f6:	f1 09       	sbc	r31, r1
 1f8:	5f 01       	movw	r10, r30
 1fa:	a2 0e       	add	r10, r18
 1fc:	b3 1e       	adc	r11, r19
 1fe:	0f 2e       	mov	r0, r31
 200:	fa e0       	ldi	r31, 0x0A	; 10
 202:	4f 2e       	mov	r4, r31
 204:	51 2c       	mov	r5, r1
 206:	61 2c       	mov	r6, r1
 208:	71 2c       	mov	r7, r1
 20a:	f0 2d       	mov	r31, r0
 20c:	c7 01       	movw	r24, r14
 20e:	b6 01       	movw	r22, r12
 210:	a3 01       	movw	r20, r6
 212:	92 01       	movw	r18, r4
 214:	0e 94 8b 01 	call	0x316	; 0x316 <__udivmodsi4>
 218:	60 5d       	subi	r22, 0xD0	; 208
 21a:	f8 01       	movw	r30, r16
 21c:	62 93       	st	-Z, r22
 21e:	8f 01       	movw	r16, r30
 220:	c2 2e       	mov	r12, r18
 222:	d3 2e       	mov	r13, r19
 224:	e4 2e       	mov	r14, r20
 226:	f5 2e       	mov	r15, r21
 228:	ae 16       	cp	r10, r30
 22a:	bf 06       	cpc	r11, r31
 22c:	79 f7       	brne	.-34     	; 0x20c <LCD_number+0xac>
 22e:	fe 01       	movw	r30, r28
 230:	e9 0d       	add	r30, r9
 232:	f1 1d       	adc	r31, r1
 234:	11 82       	std	Z+1, r1	; 0x01
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	88 23       	and	r24, r24
 23a:	79 f0       	breq	.+30     	; 0x25a <LCD_number+0xfa>
 23c:	10 e0       	ldi	r17, 0x00	; 0
 23e:	0e 94 75 00 	call	0xea	; 0xea <LCD_Char>
 242:	1f 5f       	subi	r17, 0xFF	; 255
 244:	e1 e0       	ldi	r30, 0x01	; 1
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	e1 0f       	add	r30, r17
 24e:	f1 1d       	adc	r31, r1
 250:	80 81       	ld	r24, Z
 252:	88 23       	and	r24, r24
 254:	11 f0       	breq	.+4      	; 0x25a <LCD_number+0xfa>
 256:	91 16       	cp	r9, r17
 258:	90 f7       	brcc	.-28     	; 0x23e <LCD_number+0xde>
 25a:	2c 96       	adiw	r28, 0x0c	; 12
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	af 90       	pop	r10
 27a:	9f 90       	pop	r9
 27c:	7f 90       	pop	r7
 27e:	6f 90       	pop	r6
 280:	5f 90       	pop	r5
 282:	4f 90       	pop	r4
 284:	08 95       	ret

00000286 <LCD_Init>:
}

void LCD_Init (void)					/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<PINC6);		/* Make LCD command port direction as o/p */
 286:	a6 9a       	sbi	0x14, 6	; 20
	LCD_Command_Dir |= (1<<PINC7);		/* Make LCD command port direction as o/p */
 288:	a7 9a       	sbi	0x14, 7	; 20

	LCD_Data_Dir |= (1<<PINA4);			/* Make LCD data port direction as o/p */
 28a:	d4 9a       	sbi	0x1a, 4	; 26
	LCD_Data_Dir |= (1<<PINA5);			/* Make LCD data port direction as o/p */
 28c:	d5 9a       	sbi	0x1a, 5	; 26
	LCD_Data_Dir |= (1<<PINA6);			/* Make LCD data port direction as o/p */
 28e:	d6 9a       	sbi	0x1a, 6	; 26
	LCD_Data_Dir |= (1<<PINA7);			/* Make LCD data port direction as o/p */
 290:	d7 9a       	sbi	0x1a, 7	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 292:	87 e8       	ldi	r24, 0x87	; 135
 294:	93 e1       	ldi	r25, 0x13	; 19
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_Init+0x10>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_Init+0x16>
 29c:	00 00       	nop

	_delay_ms(20);						/* LCD Power ON delay always >15ms */

	LCD_Command (0x02);					/* send for 4 bit initialization of LCD  */
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x28);					/* 2 line, 5*7 matrix in 4-bit mode */
 2a4:	88 e2       	ldi	r24, 0x28	; 40
 2a6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x0C);					/* Display ON Cursor OFF */
 2aa:	8c e0       	ldi	r24, 0x0C	; 12
 2ac:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x06);					/* Auto Increment cursor */
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x01);					/* Clear display */
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x80);					/* Cursor at home position */
 2bc:	80 e8       	ldi	r24, 0x80	; 128
 2be:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 2c2:	08 95       	ret

000002c4 <main>:

int Value;

int main()
{
	LCD_Init();							/* Initialize LCD */
 2c4:	0e 94 43 01 	call	0x286	; 0x286 <LCD_Init>

	while (1)
	{
		Value++;
 2c8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 2cc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 2d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
}

void lcd_cursor(unsigned char row,unsigned char col)
{
	if(row==1)
	LCD_Command(0X80+col);
 2da:	80 e8       	ldi	r24, 0x80	; 128
 2dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>

		lcd_cursor(1,0);				/* Go to 1st line*/
		LCD_String("VAS");				/* write string on 1st line of LCD*/
 2e0:	80 e6       	ldi	r24, 0x60	; 96
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_String>
 2e8:	2f e3       	ldi	r18, 0x3F	; 63
 2ea:	8d e0       	ldi	r24, 0x0D	; 13
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0x2a>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0x34>
 2f8:	00 00       	nop
	if(row==2)
	LCD_Command(0XC0+col);
 2fa:	80 ec       	ldi	r24, 0xC0	; 192
 2fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
//		LCD_Command (0x1C);
		_delay_ms(1000);
		
		lcd_cursor(2,0);				/* Go to 2nd line*/
		LCD_number(Value);
 300:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end>
 304:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_end+0x1>
 308:	07 2e       	mov	r0, r23
 30a:	00 0c       	add	r0, r0
 30c:	88 0b       	sbc	r24, r24
 30e:	99 0b       	sbc	r25, r25
 310:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_number>
 314:	d9 cf       	rjmp	.-78     	; 0x2c8 <main+0x4>

00000316 <__udivmodsi4>:
 316:	a1 e2       	ldi	r26, 0x21	; 33
 318:	1a 2e       	mov	r1, r26
 31a:	aa 1b       	sub	r26, r26
 31c:	bb 1b       	sub	r27, r27
 31e:	fd 01       	movw	r30, r26
 320:	0d c0       	rjmp	.+26     	; 0x33c <__udivmodsi4_ep>

00000322 <__udivmodsi4_loop>:
 322:	aa 1f       	adc	r26, r26
 324:	bb 1f       	adc	r27, r27
 326:	ee 1f       	adc	r30, r30
 328:	ff 1f       	adc	r31, r31
 32a:	a2 17       	cp	r26, r18
 32c:	b3 07       	cpc	r27, r19
 32e:	e4 07       	cpc	r30, r20
 330:	f5 07       	cpc	r31, r21
 332:	20 f0       	brcs	.+8      	; 0x33c <__udivmodsi4_ep>
 334:	a2 1b       	sub	r26, r18
 336:	b3 0b       	sbc	r27, r19
 338:	e4 0b       	sbc	r30, r20
 33a:	f5 0b       	sbc	r31, r21

0000033c <__udivmodsi4_ep>:
 33c:	66 1f       	adc	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	88 1f       	adc	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	1a 94       	dec	r1
 346:	69 f7       	brne	.-38     	; 0x322 <__udivmodsi4_loop>
 348:	60 95       	com	r22
 34a:	70 95       	com	r23
 34c:	80 95       	com	r24
 34e:	90 95       	com	r25
 350:	9b 01       	movw	r18, r22
 352:	ac 01       	movw	r20, r24
 354:	bd 01       	movw	r22, r26
 356:	cf 01       	movw	r24, r30
 358:	08 95       	ret

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
